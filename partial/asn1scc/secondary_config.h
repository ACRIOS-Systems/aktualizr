#ifndef GENERATED_ASN1SCC_secondary_config_H
#define GENERATED_ASN1SCC_secondary_config_H
/*
Code automatically generated by asn1scc tool
*/
#include "common.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef Identifier ECUSerial;

#define ECUSerial_REQUIRED_BYTES_FOR_ENCODING       29 
#define ECUSerial_REQUIRED_BITS_FOR_ENCODING        229
#define ECUSerial_REQUIRED_BYTES_FOR_ACN_ENCODING   29 
#define ECUSerial_REQUIRED_BITS_FOR_ACN_ENCODING    229
#define ECUSerial_REQUIRED_BYTES_FOR_XER_ENCODING   55

void ECUSerial_Initialize(ECUSerial pVal);
flag ECUSerial_IsConstraintValid(const ECUSerial val, int* pErrCode);


typedef Identifier ECUHardwareId;

#define ECUHardwareId_REQUIRED_BYTES_FOR_ENCODING       29 
#define ECUHardwareId_REQUIRED_BITS_FOR_ENCODING        229
#define ECUHardwareId_REQUIRED_BYTES_FOR_ACN_ENCODING   29 
#define ECUHardwareId_REQUIRED_BITS_FOR_ACN_ENCODING    229
#define ECUHardwareId_REQUIRED_BYTES_FOR_XER_ENCODING   63

void ECUHardwareId_Initialize(ECUHardwareId pVal);
flag ECUHardwareId_IsConstraintValid(const ECUHardwareId val, int* pErrCode);


typedef enum {
    virtual = 0,
    legacy = 1,
    uptane = 2
} SecondaryType;

#define SecondaryType_REQUIRED_BYTES_FOR_ENCODING       1 
#define SecondaryType_REQUIRED_BITS_FOR_ENCODING        2
#define SecondaryType_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define SecondaryType_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define SecondaryType_REQUIRED_BYTES_FOR_XER_ENCODING   48

void SecondaryType_Initialize(SecondaryType* pVal);
flag SecondaryType_IsConstraintValid(const SecondaryType* val, int* pErrCode);
#ifndef ERR_SecondaryType_unknown_enumeration_value 
#define ERR_SecondaryType_unknown_enumeration_value		1002  /**/
#endif
#ifndef ERR_SecondaryType 
#define ERR_SecondaryType		1001  /**/
#endif

typedef struct {
    SecondaryType secondaryType;
    flag partialVerifying;
    ECUSerial ecuSerial;
    ECUHardwareId ecuHardwareId;
    FilePath fullClientDir;
    FileName ecuPrivateKey;
    FileName ecuPublicKey;
    FilePath firmwarePath;
    FilePath targetNamePath;
    FilePath metadataPath;
} SecondaryConfig;

#define SecondaryConfig_REQUIRED_BYTES_FOR_ENCODING       1184 
#define SecondaryConfig_REQUIRED_BITS_FOR_ENCODING        9467
#define SecondaryConfig_REQUIRED_BYTES_FOR_ACN_ENCODING   1184 
#define SecondaryConfig_REQUIRED_BITS_FOR_ACN_ENCODING    9467
#define SecondaryConfig_REQUIRED_BYTES_FOR_XER_ENCODING   1713

void SecondaryConfig_Initialize(SecondaryConfig* pVal);
flag SecondaryConfig_IsConstraintValid(const SecondaryConfig* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag ECUSerial_Encode(const ECUSerial val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag ECUSerial_Decode(ECUSerial pVal, BitStream* pBitStrm, int* pErrCode);
flag ECUHardwareId_Encode(const ECUHardwareId val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag ECUHardwareId_Decode(ECUHardwareId pVal, BitStream* pBitStrm, int* pErrCode);
flag SecondaryType_Encode(const SecondaryType* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag SecondaryType_Decode(SecondaryType* pVal, BitStream* pBitStrm, int* pErrCode);
flag SecondaryConfig_Encode(const SecondaryConfig* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag SecondaryConfig_Decode(SecondaryConfig* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_virtual	virtual
#define ENUM_legacy	legacy
#define ENUM_uptane	uptane

#endif

#endif
