diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2750c4e..3e79a7f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -150,7 +150,7 @@ include_directories(
 
 if ("${USE_INSTALLED_DBUS}" STREQUAL "OFF")
     link_directories(
-        ${DBus_INCLUDE_DIRS}/dbus/.libs
+	${DBus_LIBRARY_DIRS} 
     )
 endif()
 
diff --git a/src/CommonAPI/DBus/DBusAddressTranslator.cpp b/src/CommonAPI/DBus/DBusAddressTranslator.cpp
index cb208c0..313e21c 100644
--- a/src/CommonAPI/DBus/DBusAddressTranslator.cpp
+++ b/src/CommonAPI/DBus/DBusAddressTranslator.cpp
@@ -69,7 +69,7 @@ DBusAddressTranslator::translate(const CommonAPI::Address &_key, DBusAddress &_v
         std::string interfaceName(_key.getInterface());
         std::string objectPath("/" + _key.getInstance());
         std::replace(objectPath.begin(), objectPath.end(), '.', '/');
-        std::string service(_key.getInterface() + "_" + _key.getInstance());
+        std::string service(_key.getInterface());
 
         if (isValid(service, '.', false, false, true)
          && isValid(objectPath, '/', true)
diff --git a/src/CommonAPI/DBus/DBusFactory.cpp b/src/CommonAPI/DBus/DBusFactory.cpp
index 40da41f..d95deb3 100644
--- a/src/CommonAPI/DBus/DBusFactory.cpp
+++ b/src/CommonAPI/DBus/DBusFactory.cpp
@@ -55,11 +55,16 @@ Factory::createProxy(
         DBusAddress dbusAddress;
         
         if (DBusAddressTranslator::get()->translate(address, dbusAddress)) {
-            std::shared_ptr<DBusProxy> proxy
-                = proxyCreateFunctionsIterator->second(dbusAddress, getConnection(_connectionId));
-            if (proxy)
-                proxy->init();
-            return proxy;
+            std::shared_ptr<DBusConnection> connection = getConnection(_connectionId);
+            if (connection->isConnected()){
+                std::shared_ptr<DBusProxy> proxy
+                    = proxyCreateFunctionsIterator->second(dbusAddress, connection);
+                if (proxy)
+                    proxy->init();
+                return proxy;
+            }else{
+                return nullptr;
+            }
         }
     }
     return nullptr;
@@ -76,11 +81,16 @@ Factory::createProxy(
         DBusAddress dbusAddress;
         
         if (DBusAddressTranslator::get()->translate(address, dbusAddress)) {
-            std::shared_ptr<DBusProxy> proxy
-                = proxyCreateFunctionsIterator->second(dbusAddress, getConnection(_context));
-            if (proxy)
-                proxy->init();
-            return proxy;
+            std::shared_ptr<DBusConnection> connection = getConnection(_context);
+            if (connection->isConnected()){
+                std::shared_ptr<DBusProxy> proxy
+                    = proxyCreateFunctionsIterator->second(dbusAddress, connection);
+                if (proxy)
+                    proxy->init();
+                return proxy;
+            }else{
+                return nullptr;
+            }
         }
     }
 
@@ -96,11 +106,16 @@ Factory::registerStub(
         CommonAPI::Address address(_domain, _interface, _instance);
         DBusAddress dbusAddress;
         if (DBusAddressTranslator::get()->translate(address, dbusAddress)) {
-            std::shared_ptr<DBusStubAdapter> adapter
-                = stubAdapterCreateFunctionsIterator->second(dbusAddress, getConnection(_connectionId), _stub);
-            if (adapter) {
-                adapter->init(adapter);
-                return registerStubAdapter(adapter);
+            std::shared_ptr<DBusConnection> connection = getConnection(_connectionId);
+            if (connection->isConnected()){
+                std::shared_ptr<DBusStubAdapter> adapter
+                    = stubAdapterCreateFunctionsIterator->second(dbusAddress, connection, _stub);
+                if (adapter) {
+                    adapter->init(adapter);
+                    return registerStubAdapter(adapter);
+                }
+            }else{
+                return false;
             }
         }
     }
@@ -117,11 +132,16 @@ Factory::registerStub(
         CommonAPI::Address address(_domain, _interface, _instance);
         DBusAddress dbusAddress;
         if (DBusAddressTranslator::get()->translate(address, dbusAddress)) {
-            std::shared_ptr<DBusStubAdapter> adapter
-                = stubAdapterCreateFunctionsIterator->second(dbusAddress, getConnection(_context), _stub);
-            if (adapter) {
-                adapter->init(adapter);
-                return registerStubAdapter(adapter);
+            std::shared_ptr<DBusConnection> connection = getConnection(_context);
+            if (connection->isConnected()){
+                std::shared_ptr<DBusStubAdapter> adapter
+                    = stubAdapterCreateFunctionsIterator->second(dbusAddress, connection, _stub);
+                if (adapter) {
+                    adapter->init(adapter);
+                    return registerStubAdapter(adapter);
+                }
+            }else{
+                return false;
             }
         }
     }
diff --git a/src/CommonAPI/DBus/DBusProxy.cpp b/src/CommonAPI/DBus/DBusProxy.cpp
index e92d90c..fec44e5 100644
--- a/src/CommonAPI/DBus/DBusProxy.cpp
+++ b/src/CommonAPI/DBus/DBusProxy.cpp
@@ -37,6 +37,7 @@ DBusProxy::DBusProxy(const DBusAddress &_dbusAddress,
 }
 
 void DBusProxy::init() {
+    dbusServiceRegistry_->setDBusServicePredefined(getAddress().getInterface());
     dbusServiceRegistrySubscription_ = dbusServiceRegistry_->subscribeAvailabilityListener(
                     getAddress().getAddress(),
                     std::bind(&DBusProxy::onDBusServiceInstanceStatus, this, std::placeholders::_1));
